# .github/workflows/publish-to-pypi.yml
name: 自动版本管理与发布

on:
  push:
    branches:
      - main  # 或者是你的主分支名称，如 master
    tags:
      - 'v*.*.*' # 也可以手动触发标签发布

jobs:
  version-and-publish:
    runs-on: ubuntu-latest
    environment: pypi
    permissions:
      contents: write  # 需要写入权限来创建 tag
      id-token: write  # PyPI 发布所需权限
    
    steps:
      - name: 检出代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # 获取完整历史以便正确计算版本
      
      - name: 设置 Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'
      
      - name: 安装依赖
        run: |
          python -m pip install --upgrade pip
          pip install build twine
      
      # 如果是标签触发，直接构建和发布
      - name: 检查是否标签触发
        id: check_tag
        run: |
          if [[ $GITHUB_REF == refs/tags/v* ]]; then
            echo "is_tag=true" >> $GITHUB_OUTPUT
          else
            echo "is_tag=false" >> $GITHUB_OUTPUT
          fi
      
      # 以下步骤只在分支推送时执行，标签推送时跳过
      - name: 获取当前版本
        id: current_version
        if: steps.check_tag.outputs.is_tag == 'false'
        run: |
          CURRENT_VERSION=$(grep 'version' pyproject.toml | head -n 1 | cut -d '"' -f 2)
          echo "current_version=${CURRENT_VERSION}" >> $GITHUB_OUTPUT
          echo "当前版本: $CURRENT_VERSION"
      
      - name: 确定版本增量类型
        id: version_bump
        if: steps.check_tag.outputs.is_tag == 'false'
        run: |
          # 获取上次发布以来的提交信息
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "none")
          
          if [ "$LAST_TAG" == "none" ]; then
            # 没有找到之前的标签，获取所有提交
            COMMITS=$(git log --pretty=format:"%s")
          else
            # 获取上次标签以来的提交
            COMMITS=$(git log $LAST_TAG..HEAD --pretty=format:"%s")
          fi
          
          # 检查提交信息中是否有特定关键词
          if echo "$COMMITS" | grep -q -i "BREAKING CHANGE\|major"; then
            echo "bump_type=major" >> $GITHUB_OUTPUT
            echo "版本增量类型: major (主版本)"
          elif echo "$COMMITS" | grep -q -i "feat\|feature\|minor"; then
            echo "bump_type=minor" >> $GITHUB_OUTPUT
            echo "版本增量类型: minor (次版本)"
          else
            echo "bump_type=patch" >> $GITHUB_OUTPUT
            echo "版本增量类型: patch (修订版本)"
          fi
      
      - name: 计算新版本号
        id: new_version
        if: steps.check_tag.outputs.is_tag == 'false'
        run: |
          CURRENT_VERSION=${{ steps.current_version.outputs.current_version }}
          BUMP_TYPE=${{ steps.version_bump.outputs.bump_type }}
          
          # 拆分版本号
          IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION"
          
          # 根据增量类型更新版本号
          if [ "$BUMP_TYPE" == "major" ]; then
            MAJOR=$((MAJOR + 1))
            MINOR=0
            PATCH=0
          elif [ "$BUMP_TYPE" == "minor" ]; then
            MINOR=$((MINOR + 1))
            PATCH=0
          else
            PATCH=$((PATCH + 1))
          fi
          
          NEW_VERSION="${MAJOR}.${MINOR}.${PATCH}"
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "新版本: $NEW_VERSION"
      
      - name: 更新版本号
        if: steps.check_tag.outputs.is_tag == 'false'
        run: |
          NEW_VERSION=${{ steps.new_version.outputs.new_version }}
          
          # 更新 pyproject.toml 中的版本号
          sed -i "s/version = \"${{ steps.current_version.outputs.current_version }}\"/version = \"$NEW_VERSION\"/" pyproject.toml
          
          # 提交版本更新
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add pyproject.toml
          git commit -m "chore: 更新版本号到 $NEW_VERSION [skip ci]"
          git push
      
      - name: 创建新 Tag
        id: create_tag
        if: steps.check_tag.outputs.is_tag == 'false'
        run: |
          NEW_VERSION=${{ steps.new_version.outputs.new_version }}
          
          # 检查标签是否已存在
          if git rev-parse "v$NEW_VERSION" >/dev/null 2>&1; then
            echo "标签 v$NEW_VERSION 已存在，需要递增版本号"
            
            # 拆分版本号
            IFS='.' read -r MAJOR MINOR PATCH <<< "$NEW_VERSION"
            
            # 递增修订版本号
            PATCH=$((PATCH + 1))
            UPDATED_VERSION="${MAJOR}.${MINOR}.${PATCH}"
            
            echo "递增后的版本号: $UPDATED_VERSION"
            
            # 更新 pyproject.toml 中的版本号
            sed -i "s/version = \"$NEW_VERSION\"/version = \"$UPDATED_VERSION\"/" pyproject.toml
            
            # 提交更新的版本号
            git add pyproject.toml
            git commit -m "chore: 递增版本号到 $UPDATED_VERSION [标签冲突解决] [skip ci]"
            git push
            
            # 创建新标签
            git tag -a "v$UPDATED_VERSION" -m "Release v$UPDATED_VERSION"
            git push origin "v$UPDATED_VERSION"
            
            # 设置输出变量
            echo "version=$UPDATED_VERSION" >> $GITHUB_OUTPUT
          else
            echo "创建新标签 v$NEW_VERSION"
            git tag -a "v$NEW_VERSION" -m "Release v$NEW_VERSION"
            git push origin "v$NEW_VERSION"
            
            # 设置输出变量
            echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
          fi
      
      # 以下步骤在标签推送和分支推送时都执行
      - name: 构建包
        run: |
          # 如果是标签触发，直接构建
          if [[ ${{ steps.check_tag.outputs.is_tag }} == 'true' ]]; then
            echo "使用标签版本构建包"
          else
            # 使用 create_tag 步骤输出的版本号
            FINAL_VERSION=${{ steps.create_tag.outputs.version }}
            echo "使用版本号 $FINAL_VERSION 构建包"
          fi
          python -m build
      
      - name: 发布到 PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        # 使用 OIDC 信任发布，不需要 API token